package com.example.searchservice;

import com.azure.search.documents.SearchAsyncClient;
import com.azure.search.documents.models.SearchPagedFlux;
import com.azure.search.documents.models.SearchResult;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.Collections;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class SearchServiceTest {

    private SearchAsyncClient searchAsyncClient;
    private SearchService searchService;

    @BeforeEach
    void setUp() {
        searchAsyncClient = Mockito.mock(SearchAsyncClient.class);

        // Inject mock client into service (instead of real one)
        searchService = new SearchService("http://fake-endpoint", "fake-index", "fake-key") {
            @Override
            protected SearchAsyncClient buildClient(String endpoint, String indexName, String apiKey) {
                return searchAsyncClient;
            }
        };
    }

    @Test
    void testSearchFound() {
        SearchResult result = new SearchResult()
                .setDocument(Map.of("lookupValue", "FoundValue"));

        SearchPagedFlux pagedFlux = new SearchPagedFlux(() ->
                Mono.just(new com.azure.core.util.paging.PagedResponseBase<>(
                        null, 200, null, Collections.singletonList(result), null, null))
        );

        when(searchAsyncClient.search(any(), any())).thenReturn(pagedFlux);

        Mono<ResponseEntity<SearchResponse>> response = searchService.search("testParam", "Bearer token");

        StepVerifier.create(response)
                .expectNextMatches(r -> r.getBody() != null &&
                        r.getBody().getParam1().equals("testParam") &&
                        r.getBody().getLookupValue().equals("FoundValue"))
                .verifyComplete();
    }

    @Test
    void testSearchNotFound() {
        SearchPagedFlux pagedFlux = new SearchPagedFlux(() ->
                Mono.just(new com.azure.core.util.paging.PagedResponseBase<>(
                        null, 200, null, Collections.emptyList(), null, null))
        );

        when(searchAsyncClient.search(any(), any())).thenReturn(pagedFlux);

        Mono<ResponseEntity<SearchResponse>> response = searchService.search("missing", "Bearer token");

        StepVerifier.create(response)
                .expectNextMatches(r -> r.getStatusCode().value() == 204)
                .verifyComplete();
    }

    @Test
    void testSearchError() {
        when(searchAsyncClient.search(any(), any()))
                .thenThrow(new RuntimeException("Azure failure"));

        Mono<ResponseEntity<SearchResponse>> response = searchService.search("error", "Bearer token");

        StepVerifier.create(response)
                .expectNextMatches(r -> r.getStatusCode().value() == 500)
                .verifyComplete();
    }
}
